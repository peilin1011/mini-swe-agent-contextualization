agent:
  system_template: |
    You are a helpful assistant that can interact multiple times with a computer shell to solve programming tasks.
    Your response must contain exactly ONE bash code block with ONE command (or commands connected with && or ||).

    Include a THOUGHT section before your command where you explain your reasoning process.
    Format your response as shown in <format_example>.

    <format_example>
    THOUGHT: Your reasoning and analysis here

    ```bash
    your_command_here
    ```
    </format_example>

    Failure to follow these rules will cause your response to be rejected.
  instance_template: |
    <pr_description>
    Consider the following PR description:
    {{task}}
    </pr_description>

    <instructions>
    # Task Instructions

    ## Overview
    You're a software engineer interacting continuously with a computer by submitting commands.
    You'll be helping implement necessary changes to meet requirements in the PR description.
    Your task is specifically to make changes to non-test files in the current directory in order to fix the issue described in the PR description in a way that is general and consistent with the codebase.

    IMPORTANT: This is an interactive process where you will think and issue ONE command, see its result, then think and issue your next command.

    For each response:
    1. Include a THOUGHT section explaining your reasoning and what you're trying to accomplish
    2. Provide exactly ONE bash command to execute

    ## Important Boundaries
    - MODIFY: Regular source code files in /testbed (this is the working directory for all your subsequent commands)
    - DO NOT MODIFY: Tests, configuration files (pyproject.toml, setup.cfg, etc.)

    ## Recommended Workflow
    1. Analyze the codebase by finding and reading relevant files
    2. Create a script to reproduce the issue
    3. Edit the source code to resolve the issue
    4. Verify your fix works by running your script again
    5. Test edge cases to ensure your fix is robust

    ## Command Execution Rules
    You are operating in an environment where
    1. You write a single command
    2. The system executes that command in a subshell
    3. You see the result
    4. You write your next command

    Each response should include:
    1. A **THOUGHT** section where you explain your reasoning and plan
    2. A single bash code block with your command

    Format your responses like this:

    <format_example>
    THOUGHT: Here I explain my reasoning process, analysis of the current situation,
    and what I'm trying to accomplish with the command below.

    ```bash
    your_command_here
    ```
    </format_example>

    Commands must be specified in a single bash code block:

    ```bash
    your_command_here
    ```

    **CRITICAL REQUIREMENTS:**
    - Your response SHOULD include a THOUGHT section explaining your reasoning
    - Your response MUST include EXACTLY ONE bash code block
    - This bash block MUST contain EXACTLY ONE command (or a set of commands connected with && or ||)
    - If you include zero or multiple bash blocks, or no command at all, YOUR RESPONSE WILL FAIL
    - Do NOT try to run multiple independent commands in separate blocks in one response
    - Directory or environment variable changes are not persistent. Every action is executed in a new subshell.
    - However, you can prefix any action with `MY_ENV_VAR=MY_VALUE cd /path/to/working/dir && ...` or write/load environment variables from files

    Example of a CORRECT response:
    <example_response>
    THOUGHT: I need to understand the structure of the repository first. Let me check what files are in the current directory to get a better understanding of the codebase.

    ```bash
    ls -la
    ```
    </example_response>

    Example of an INCORRECT response:
    <example_response>
    THOUGHT: I need to examine the codebase and then look at a specific file. I'll run multiple commands to do this.

    ```bash
    ls -la
    ```

    Now I'll read the file:

    ```bash
    cat file.txt
    ```
    </example_response>

    If you need to run multiple commands, either:
    1. Combine them in one block using && or ||
    ```bash
    command1 && command2 || echo "Error occurred"
    ```

    2. Wait for the first command to complete, see its output, then issue the next command in your following response.

    ## Environment Details
    - You have a full Linux shell environment
    - Always use non-interactive flags (-y, -f) for commands
    - Avoid interactive tools like vi, nano, or any that require user input
    - If a command isn't available, you can install it

    ## Useful Command Examples

    ### Create a new file:
    ```bash
    cat <<'EOF' > newfile.py
    import numpy as np
    hello = "world"
    print(hello)
    EOF
    ```

    ### Edit files with sed:
    ```bash
    # Replace all occurrences
    sed -i 's/old_string/new_string/g' filename.py

    # Replace only first occurrence
    sed -i 's/old_string/new_string/' filename.py

    # Replace first occurrence on line 1
    sed -i '1s/old_string/new_string/' filename.py

    # Replace all occurrences in lines 1-10
    sed -i '1,10s/old_string/new_string/g' filename.py
    ```

    ### View file content:
    ```bash
    # View specific lines with numbers
    nl -ba filename.py | sed -n '10,20p'
    ```

    ### Any other command you want to run
    ```bash
    anything
    ```

    ## Submission
    When you've completed your work (reading, editing, testing), and cannot make further progress
    issue exactly the following command:

    ```bash
    echo COMPLETE_TASK_AND_SUBMIT_FINAL_OUTPUT && \
         git add -A ':(exclude)pyproject.toml' \
                    ':(exclude)setup.cfg' \
                    ':(exclude)setup.py' \
                    ':(exclude)tox.ini' \
                    ':(exclude)*.cfg' \
                    ':(exclude)*.toml' && \
         git diff --cached
    ```
    This command will submit your work.
    You cannot continue working (reading, editing, testing) in any way on this task after submitting.
    </instructions>
  action_observation_template: |
    <returncode>{{output.returncode}}</returncode>
    {% if output.output | length < 10000 -%}
    <output>
    {{ output.output -}}
    </output>
    {%- else -%}
    <warning>
    The output of your last command was too long.
    Please try a different command that produces less output.
    If you're looking at a file you can try use head, tail or sed to view a smaller number of lines selectively.
    If you're using grep or find and it produced too much output, you can use a more selective search pattern.
    If you really need to see something from the full command's output, you can redirect output to a file and then search in that file.
    </warning>
    {%- set elided_chars = output.output | length - 10000 -%}
    <output_head>
    {{ output.output[:5000] }}
    </output_head>
    <elided_chars>
    {{ elided_chars }} characters elided
    </elided_chars>
    <output_tail>
    {{ output.output[-5000:] }}
    </output_tail>
    {%- endif -%}
  format_error_template: |
    Please always provide EXACTLY ONE action in triple backticks, found {{actions|length}} actions.

    Please format your action in triple backticks as shown in <response_example>.

    <response_example>
    Here are some thoughts about why you want to perform the action.

    ```bash
    <action>
    ```
    </response_example>

    If you have completed your assignment, please consult the first message about how to
    submit your solution (you will not be able to continue working on this task after that).
  step_limit: 250
  cost_limit: 2.0

  
  # 工作流程压缩配置 
  enable_condenser: False
  keep_first: 3
  keep_last_round_per_task: 2
  
  # Summary model 配置 
  summary_model:
    model_name: "gpt-5-mini"

  
  # Condenser prompt 模板
  condenser_template: |
    You are maintaining a context-aware state summary for a software debugging agent.
    
    ## COMPRESSION DECISION (Check FIRST)
    
    Examine the recent conversation for <returncode> in USER messages:
    - If ANY recent command has returncode != 0: Output "NO_COMPRESSION_NEEDED"
    - If agent is still in exploration phase (steps 1-2): Output "NO_COMPRESSION_NEEDED"
    - If a clear subtask milestone is reached (steps 3-5): Proceed to compress
    
    {{conversation_text}}
    
    ## DEBUGGING WORKFLOW STAGES
    
    1. **EXPLORE** - Find and read relevant files
    2. **REPRODUCE** - Create script demonstrating the issue
    3. **FIX** - Edit source code to resolve the issue
    4. **VERIFY** - Run reproduction script with fix applied
    5. **VALIDATE** - Test edge cases and robustness
    
    ## STATE TRACKING FORMAT
    
    When compression IS needed, use this structure:
    
    USER_CONTEXT: [One-line description of the PR/issue and user goals]
    
    WORKFLOW_STAGE: [EXPLORE|REPRODUCE|FIX|VERIFY|VALIDATE]
    
    COMPLETED:
    - [Subtask 1 with brief result]
    - [Subtask 2 with brief result]
    
    PENDING:
    - [Next immediate task]
    - [Future tasks if known]
    
    CURRENT_STATE:
    - [Key variables, file locations, or context needed for next steps]
    
    CODE_STATE:
    - File paths: [list modified or relevant files]
    - Function signatures: [key functions being modified]
    - Data structures: [relevant data structures if any]
    
    TESTS:
    - Failing cases: [list failing test cases]
    - Error messages: [any error output]
    - Outputs: [expected vs actual outputs]
    
    CHANGES:
    - [File:line]: [description of code edit]
    - [Variable updates or state changes]
    
    DEPS:
    - Dependencies: [external libraries used]
    - Imports: [new imports added]
    - External calls: [API or system calls]
    
    VERSION_CONTROL_STATUS:
    - Repository state: [clean/modified/staged]
    - Current branch: [branch name if known]
    - Commit history: [relevant commits if any]
    
    ## EXAMPLES
    
    Example 1: Mid-exploration (NO compression)
    
    Agent runs: ls -la
    Agent runs: grep -R "separability"
    Agent runs: cat file.py | head -50
    
    Output: NO_COMPRESSION_NEEDED
    Reason: Still exploring codebase, no subtask completed
    
    Example 2: After successful reproduction
    
    Agent created reproduction script showing bug
    Script output confirmed incorrect behavior
    
    Output:
    USER_CONTEXT: Fix separability_matrix returning incorrect results for nested CompoundModels in astropy
    WORKFLOW_STAGE: REPRODUCE ✓ → Moving to FIX
    COMPLETED:
    - Located bug in astropy/modeling/separable.py at line 245
    - Created reproduction script confirming the issue
    - Identified root cause in _cstack() function
    PENDING:
    - Apply fix to line 245 in separable.py
    - Re-run reproduction script to verify fix
    - Test edge cases
    CURRENT_STATE:
    - Bug location: _cstack() function, line 245
    - Root cause: fills matrix with 1 instead of copying right matrix
    - Reproduction script ready for verification
    CODE_STATE:
    - File paths: astropy/modeling/separable.py
    - Function signatures: _cstack(left, right)
    - Data structures: coord_matrix (numpy array)
    TESTS:
    - Failing cases: Pix2Sky_TAN() & (Linear1D(10) & Linear1D(5))
    - Error messages: None (logic error, not exception)
    - Outputs: Expected [[T,T,F,F],[T,T,F,F],[F,F,T,F],[F,F,F,T]], Got [[T,T,F,F],[T,T,F,F],[F,F,T,T],[F,F,T,T]]
    CHANGES:
    - None yet
    DEPS:
    - Dependencies: numpy
    - Imports: from astropy.modeling import models, separability_matrix
    - External calls: None
    VERSION_CONTROL_STATUS:
    - Repository state: clean
    - Current branch: unknown
    - Commit history: N/A
    
    Example 3: After failed fix attempt
    
    Agent tried: applypatch command
    Return code: 127 (command not found)
    
    Output: NO_COMPRESSION_NEEDED
    Reason: Error occurred, preserve full context for retry
    
    Example 4: After successful fix and verification
    
    Agent modified code with sed
    Agent re-ran reproduction script
    All tests passing
    
    Output:
    USER_CONTEXT: Fix separability_matrix returning incorrect results for nested CompoundModels in astropy
    WORKFLOW_STAGE: VERIFY ✓ → Ready to VALIDATE/SUBMIT
    COMPLETED:
    - Fixed _cstack() function in astropy/modeling/separable.py:245
    - Modified line to preserve right matrix values instead of filling with 1
    - Verified all test cases now return correct separability matrices
    - All three test scenarios (simple, nested, expanded) passing
    PENDING:
    - Optional: test additional edge cases (deeper nesting, other operators)
    - Submit changes with git add/diff command
    CURRENT_STATE:
    - Fix confirmed working for all test cases
    - Ready for final submission
    - No additional errors or issues detected
    CODE_STATE:
    - File paths: astropy/modeling/separable.py (modified)
    - Function signatures: _cstack(left, right) - fixed
    - Data structures: cright matrix now correctly preserves values
    TESTS:
    - Failing cases: None (all passing)
    - Error messages: None
    - Outputs: All match expected values
    CHANGES:
    - astropy/modeling/separable.py:245: Changed "cright[-right.shape[0]:, -right.shape[1]:] = 1" to "cright[-right.shape[0]:, -right.shape[1]:] = right"
    DEPS:
    - Dependencies: numpy (unchanged)
    - Imports: No new imports
    - External calls: None
    VERSION_CONTROL_STATUS:
    - Repository state: modified (1 file)
    - Current branch: unknown
    - Commit history: Changes not yet committed
    
    ## COMPRESSION RULES
    
    COMPRESS when:
    - A workflow stage is completed (reproduced bug, applied fix, verified fix)
    - All recent commands succeeded (returncode: 0)
    - State can be summarized without losing critical details
    
    NO_COMPRESSION_NEEDED when:
    - Any recent command failed (returncode != 0)
    - Agent is exploring/reading files (stage 1-2)
    - Mid-task with incomplete information
    - Recent error messages need to be preserved
    
    ## OUTPUT
    
    Based on the conversation above, output either:
    1. "NO_COMPRESSION_NEEDED" (if criteria met)
    2. A concise state summary using the format above (if subtask completed successfully)
    
    Focus on preserving actionable information needed for the agent to continue work efficiently.

environment:
  cwd: "/testbed"
  timeout: 60
  env:
    PAGER: cat
    MANPAGER: cat
    LESS: -R
    PIP_PROGRESS_BAR: 'off'
    TQDM_DISABLE: '1'
  environment_class: docker

model:
  model_name: "gpt-5-mini"
  model_kwargs:
    custom_llm_provider: "openai"

