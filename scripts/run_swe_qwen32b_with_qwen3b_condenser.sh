#!/bin/bash

# Usage: ./scripts/run_swe_qwen32b_with_qwen3b_condenser.sh [run_id]
# Example: ./scripts/run_swe_qwen32b_with_qwen3b_condenser.sh experiment_001
#
# Ê≠§ËÑöÊú¨ÂêØÂä®‰∏§‰∏™ vLLM ÊúçÂä°Âô®Ôºö
# - Á´ØÂè£ 8000: Qwen2.5-Coder-32B-Instruct (‰∏ªÊ®°ÂûãÔºåÁî®‰∫é‰ª£Á†ÅÊé®ÁêÜ)
# - Á´ØÂè£ 8001: Qwen3-32B (ËΩªÈáèÊ®°ÂûãÔºåÁî®‰∫éÂ∑•‰ΩúÊµÅÁ®ãÂéãÁº©)

export HF_HOME="/anvme/workspace/b273dd14-swe/.cache/huggingface"
export CUDA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
export NO_PROXY="localhost,127.0.0.1"
export no_proxy="localhost,127.0.0.1"

main_model="Qwen/Qwen3-32B"
summary_model="Qwen/Qwen3-4B"
log_dir='logs'
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

run_id="${1:-unspecified_run}"
vllm_main_log="$log_dir/vllm_main_${TIMESTAMP}_${run_id}.log"
vllm_summary_log="$log_dir/vllm_summary_${TIMESTAMP}_${run_id}.log"
swe_log_file="$log_dir/swe_dual_${TIMESTAMP}_${run_id}.log"

mkdir -p $log_dir

#########################################################
# Á´ØÂè£ÈÖçÁΩÆ
main_port=8000
summary_port=8001

echo "Port configuration:"
echo "  Main model $main_model : $main_port"
echo "  Summary model $summary_model : $summary_port"

# Ê£ÄÊü•Á´ØÂè£ÊòØÂê¶Ë¢´Âç†Áî®
for port in $main_port $summary_port; do
    if ss -lntu | awk 'NR>1 {print $5}' | sed 's/.*://' | grep -qw "$port"; then
        echo "Error: Port $port is already in use. Please free the port first." >&2
        exit 1
    fi
done

#########################################################

# Clean up vLLM servers if script is interrupted
cleanup() { 
    echo "Script interrupted or exiting. Cleaning up vLLM servers..." >&2
    if [ -n "$main_pid" ] && ps -p "$main_pid" > /dev/null; then
        echo "Stopping main model server (PID: $main_pid)..." >&2
        kill "$main_pid"
        wait "$main_pid" 2>/dev/null 
    fi
    if [ -n "$summary_pid" ] && ps -p "$summary_pid" > /dev/null; then
        echo "Stopping summary model server (PID: $summary_pid)..." >&2
        kill "$summary_pid"
        wait "$summary_pid" 2>/dev/null 
    fi
    echo "All vLLM servers stopped." >&2
}
trap cleanup SIGINT SIGTERM EXIT

#########################################################
# ÂêØÂä®‰∏ªÊ®°ÂûãÊúçÂä°Âô® (Qwen2.5-Coder-32B)

echo ""
echo "üöÄ Starting Main Model Server: $main_model"

# ‰ΩøÁî® 4 GPUs ËøêË°å‰∏ªÊ®°Âûã
vllm serve $main_model \
    --tensor_parallel_size 4 \
    --enforce_eager \
    --gpu_memory_utilization 0.90 \
    --enable-auto-tool-choice \
    --tool-call-parser hermes \
    --reasoning-parser deepseek_r1 \
    --rope-scaling '{"factor": 4.0, "original_max_position_embeddings": 32768, "rope_type": "yarn"}' \
    --enable_prefix_caching \
    --max_num_seqs 20 \
    --max_model_len $((128 * 1024 - 8 * 1024)) \
    --seed 41 \
    --port $main_port > $vllm_main_log 2>&1 &

main_pid=$!

echo "Main model server starting (PID: $main_pid, Port: $main_port)"

# Á≠âÂæÖ‰∏ªÊ®°ÂûãÂàùÂßãÂåñ
timeout_minutes=9
start_time=$(date +%s)
timeout_seconds=$((timeout_minutes * 60))

echo "Waiting for main model to initialize (timeout: ${timeout_minutes} minutes)..."

while [ $(($(date +%s) - start_time)) -lt $timeout_seconds ]; do
    if ! ps -p $main_pid > /dev/null; then
        echo "‚ùå Main model server process exited with an error"
        exit 1
    fi
    
    if [ -f "$vllm_main_log" ] && grep -q "Application startup complete." "$vllm_main_log"; then
        echo "‚úÖ Main model initialized successfully"
        break
    fi
    sleep 2
done

if [ $(($(date +%s) - start_time)) -ge $timeout_seconds ]; then
    echo "‚ùå Main model initialization timed out"
    exit 1
fi

#########################################################
# ÂêØÂä®ÊÄªÁªìÊ®°ÂûãÊúçÂä°Âô® (Qwen3-32B)

echo ""
echo "üöÄ Starting Summary Model Server: $summary_model"

# ‰ΩøÁî®Ââ©‰Ωô 4 GPUs ËøêË°åÊÄªÁªìÊ®°Âûã
CUDA_VISIBLE_DEVICES=4,5,6,7 vllm serve $summary_model \
    --tensor_parallel_size 4 \
    --enforce_eager \
    --gpu_memory_utilization 0.90 \
    --enable-auto-tool-choice \
    --tool-call-parser hermes \
    --reasoning-parser deepseek_r1 \
    --rope-scaling '{"factor": 4.0, "original_max_position_embeddings": 32768, "rope_type": "yarn"}' \
    --enable_prefix_caching \
    --max_num_seqs 20 \
    --max_model_len $((64 * 1024)) \
    --seed 42 \
    --port $summary_port > $vllm_summary_log 2>&1 &

summary_pid=$!

echo "Summary model server starting (PID: $summary_pid, Port: $summary_port)"

# Á≠âÂæÖÊÄªÁªìÊ®°ÂûãÂàùÂßãÂåñ
start_time=$(date +%s)

echo "Waiting for summary model to initialize (timeout: ${timeout_minutes} minutes)..."

while [ $(($(date +%s) - start_time)) -lt $timeout_seconds ]; do
    if ! ps -p $summary_pid > /dev/null; then
        echo "‚ùå Summary model server process exited with an error"
        exit 1
    fi
    
    if [ -f "$vllm_summary_log" ] && grep -q "Application startup complete." "$vllm_summary_log"; then
        echo "‚úÖ Summary model initialized successfully"
        break
    fi
    sleep 2
done

if [ $(($(date +%s) - start_time)) -ge $timeout_seconds ]; then
    echo "‚ùå Summary model initialization timed out"
    exit 1
fi

cat <<EOF

======================================================================
üéØ Both vLLM Servers are Ready!
======================================================================
   Main Model ($main_model):
   ‚Ä¢ PID: $main_pid
   ‚Ä¢ Port: $main_port
   ‚Ä¢ API Base: http://localhost:$main_port/v1
   ‚Ä¢ Log: $vllm_main_log
   
   Summary Model ($summary_model):
   ‚Ä¢ PID: $summary_pid
   ‚Ä¢ Port: $summary_port
   ‚Ä¢ API Base: http://localhost:$summary_port/v1
   ‚Ä¢ Log: $vllm_summary_log
======================================================================

üí° Starting mini-SWE-agent with dual-model workflow condenser...
üõë Press Ctrl+C to stop both servers

======================================================================
üöÄ mini-SWE-agent: Qwen2.5-Coder-32B + Qwen3-32B Condenser
======================================================================

EOF

#########################################################
# mini-SWE-agent ÈÖçÁΩÆ
OUTPUT_DIR="./swebench_qwen32b_qwen3b_results_${run_id}"
SLICE="0:1"
WORKERS=1
CONFIG_FILE="/anvme/workspace/b273dd14-swe/mini-swe-agent/src/minisweagent/config/extra/swebench_qwen32b_qwen3b.yaml"

# Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂
if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ùå ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®: $CONFIG_FILE"
    exit 1
fi

# ËøêË°å mini-SWE-agent
echo "üöÄ ÂêØÂä® mini-SWE-agent ËØÑ‰º∞..."
cd /anvme/workspace/b273dd14-swe/mini-swe-agent

python src/minisweagent/run/extra/swebench_with_condenser.py \
  --subset verified \
  --split test \
  --slice $SLICE \
  -o $OUTPUT_DIR \
  -w $WORKERS \
  --config $CONFIG_FILE \
  --environment singularity \
  --model "Qwen/Qwen3-32B" \
  --redo-existing 

SWE_EXIT_CODE=${PIPESTATUS[0]}

echo ""
echo "======================================================================="
if [ $SWE_EXIT_CODE -eq 0 ]; then
    echo "üéâ mini-SWE-agent ËØÑ‰º∞ÂÆåÊàêÔºÅ"
else
    echo "‚ùå mini-SWE-agent ËØÑ‰º∞Â§±Ë¥• (ÈÄÄÂá∫Á†Å: $SWE_EXIT_CODE)"
fi
echo "======================================================================="
echo "üìÅ ÁªìÊûúÁõÆÂΩï: $OUTPUT_DIR"
echo "üìã SWE-agent Êó•Âøó: $swe_log_file"
echo "üìã Main Model Êó•Âøó: $vllm_main_log"
echo "üìã Summary Model Êó•Âøó: $vllm_summary_log"
echo "üìã ÈÖçÁΩÆÊñá‰ª∂: $CONFIG_FILE"
echo "======================================================================="

# Wait for both processes to fully terminate
wait $main_pid 2>/dev/null || true
wait $summary_pid 2>/dev/null || true


