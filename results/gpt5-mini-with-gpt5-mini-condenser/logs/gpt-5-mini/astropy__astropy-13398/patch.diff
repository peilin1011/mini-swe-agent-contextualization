diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..d01feb0724
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,63 @@
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""
+Direct ITRS <-> observed (AltAz/HADec) transformations that stay within the ITRS.
+"""
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+
+def itrs_to_observed_mat(observed_frame):
+
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    # Treat ITRS coordinates as time invariant for this transform.
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                             - observed_frame.location.get_itrs(observed_frame.obstime).cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs(observed_coo.obstime).cartesian
+    return itrs_frame.realize_frame(rep)
diff --git a/astropy/utils/iers/iers.py b/astropy/utils/iers/iers.py
index dae42fba8f..09c985a55e 100644
--- a/astropy/utils/iers/iers.py
+++ b/astropy/utils/iers/iers.py
@@ -263,10 +263,24 @@ class IERS(QTable):
         utc : float or array
             fractional part of MJD
         """
-        try:  # see if this is a Time object
-            jd1, jd2 = jd1.utc.jd1, jd1.utc.jd2
+        # If a Time object is passed, try to get its UTC jd parts; if that
+        # fails (e.g., due to missing IERS data), fall back to the Time's
+        # jd1/jd2 directly to avoid raising here. This keeps behavior
+        # deterministic in environments without internet/IERS access.
+        try:
+            from astropy.time import Time
         except Exception:
-            pass
+            Time = None
+        if Time is not None and isinstance(jd1, Time):
+            try:
+                jd1, jd2 = jd1.utc.jd1, jd1.utc.jd2
+            except Exception:
+                jd1, jd2 = jd1.jd1, jd1.jd2
+        else:
+            try:  # see if this is a Time object-like
+                jd1, jd2 = jd1.utc.jd1, jd1.utc.jd2
+            except Exception:
+                pass
 
         mjd = np.floor(jd1 - MJD_ZERO + jd2)
         utc = jd1 - (MJD_ZERO+mjd) + jd2
