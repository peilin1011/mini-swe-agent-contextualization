diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..17b524478e 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -48,6 +48,7 @@ from . import supergalactic_transforms
 from . import icrs_cirs_transforms
 from . import cirs_observed_transforms
 from . import icrs_observed_transforms
+from . import itrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
 
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..6e85498111
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,95 @@
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""
+Direct transformation functions between ITRS and observed frames (AltAz, HADec).
+
+This approach stays entirely within the ITRS: it forms topocentric ITRS
+vectors by subtracting the observer ITRS location from the target ITRS position,
+and then applies a simple rotation based on the observer geodetic longitude
+and latitude to get to AltAz or HADec. The inverse adds the observer ITRS
+location after applying the transpose of the rotation.
+
+Notably, this treats ITRS positions as time-invariant for these transforms,
+and does not attempt to synchronize obstimes or reference positions to the SSB.
+"""
+
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+
+def _itrs_to_observed_mat(observed_frame):
+    """
+    Construct the 3x3 rotation matrix that takes a topocentric ITRS vector
+    into the observed frame (AltAz or HADec).
+    """
+    # Geodetic longitude and latitude define the local axes.
+    lon, lat, _ = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # ITRS -> AltAz
+        # AltAz is left-handed; construct rotation and flip x-axis.
+        elat = lat.to_value(u.radian)
+        minus_x = np.eye(3)
+        minus_x[0, 0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    else:
+        # ITRS -> HADec
+        # HADec is left-handed; construct rotation and flip y-axis.
+        minus_y = np.eye(3)
+        minus_y[1, 1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to AltAz/HADec using a topocentric ITRS approach.
+
+    The ITRS coordinate is treated as time-invariant; we simply subtract the
+    observer's ITRS location to get a topocentric vector and rotate into the
+    observed frame. No attempt is made to synchronize obstimes via ITRS->ITRS.
+    """
+    # Ensure required location is present.
+    if observed_frame.location is None:
+        raise ValueError("Observed frame requires a location for ITRS<->Observed transforms.")
+
+    # Form the topocentric ITRS position by removing the observer geocentric location.
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                             - observed_frame.location.get_itrs().cartesian)
+
+    # Rotate into the observed frame.
+    rep = topocentric_itrs_repr.transform(_itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from AltAz/HADec to ITRS using the inverse of the direct rotation
+    and then adding the observer ITRS location.
+    """
+    if observed_coo.location is None:
+        raise ValueError("Observed coordinate requires a location for ITRS<->Observed transforms.")
+
+    # Transform observed topocentric vector back into ITRS coordinates.
+    topocentric_itrs_repr = observed_coo.cartesian.transform(
+        matrix_transpose(_itrs_to_observed_mat(observed_coo))
+    )
+    # Add the geocentric ITRS location of the observer to get the geocentric ITRS position.
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
