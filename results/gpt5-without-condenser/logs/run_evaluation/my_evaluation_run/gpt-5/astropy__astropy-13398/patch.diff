diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..1315098747 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..a03cd9f198
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,104 @@
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""
+Direct transformations between ITRS and observed frames (AltAz, HADec).
+
+These transforms operate purely within ITRS/topocentric space, avoiding
+time-dependent ITRS->ITRS transforms and aberration corrections. This ensures
+that nearby ITRS positions (e.g., satellites, aircraft, mountains) transform
+to sensible topocentric observed coordinates without being affected by
+geocentric vs. topocentric aberration or by referencing to the SSB.
+"""
+
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+
+def _itrs_to_observed_mat(observed_frame):
+    """
+    Construct the rotation matrix that converts from ITRS cartesian coordinates
+    to observed-frame cartesian coordinates at a given Earth location.
+
+    Parameters
+    ----------
+    observed_frame : AltAz or HADec
+        The destination observed frame, which must include a valid EarthLocation.
+
+    Returns
+    -------
+    mat : ndarray, shape (3, 3)
+        Rotation matrix from ITRS to observed coordinates.
+    """
+    lon, lat, _ = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # ITRS -> AltAz rotation
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed: flip x-axis
+        minus_x = np.eye(3)
+        minus_x[0, 0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    else:
+        # ITRS -> HADec rotation
+        # HADec frame is left handed: flip y-axis
+        minus_y = np.eye(3)
+        minus_y[1, 1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to an observed frame (AltAz or HADec) using a purely
+    topocentric approach within ITRS.
+
+    Notes
+    -----
+    The ITRS input is treated as time-invariant; we avoid any ITRS->ITRS
+    transformation tied to obstime. The output adopts the obstime of the
+    destination observed frame (which may be None).
+    """
+    if observed_frame.location is None:
+        raise ValueError("Observed frame requires a valid EarthLocation for ITRS<->observed transforms.")
+
+    # Topocentric ITRS position: subtract observatory geocentric ITRS position.
+    # Use location.get_itrs() with default obstime to avoid time-dependent shifts.
+    topo_itrs = (itrs_coo.cartesian
+                 - observed_frame.location.get_itrs().cartesian)
+
+    # Rotate into observed frame
+    rep = topo_itrs.transform(_itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from an observed frame (AltAz or HADec) to ITRS using a purely
+    topocentric approach within ITRS.
+    """
+    if observed_coo.location is None:
+        raise ValueError("Observed frame requires a valid EarthLocation for ITRS<->observed transforms.")
+
+    # Convert observed cartesian into topocentric ITRS cartesian
+    topo_itrs = observed_coo.cartesian.transform(
+        matrix_transpose(_itrs_to_observed_mat(observed_coo))
+    )
+    # Add observatory geocentric ITRS position to get geocentric ITRS
+    rep = topo_itrs + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
